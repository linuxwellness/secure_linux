rule win_obscene_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.obscene."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.obscene"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 51 ff7510 ff750c ff15???????? 59 59 }
            // n = 6, score = 100
            //   51                   | push                ecx
            //   ff7510               | push                dword ptr [ebp + 0x10]
            //   ff750c               | push                dword ptr [ebp + 0xc]
            //   ff15????????         |                     
            //   59                   | pop                 ecx
            //   59                   | pop                 ecx

        $sequence_1 = { 80a012109a0000 68???????? e8???????? 59 68???????? }
            // n = 5, score = 100
            //   80a012109a0000       | and                 byte ptr [eax + 0x9a1012], 0
            //   68????????           |                     
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   68????????           |                     

        $sequence_2 = { e8???????? 59 59 68???????? 68???????? 8d85ecf6ffff 50 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   59                   | pop                 ecx
            //   68????????           |                     
            //   68????????           |                     
            //   8d85ecf6ffff         | lea                 eax, [ebp - 0x914]
            //   50                   | push                eax

        $sequence_3 = { 8b4508 0fbe00 83f841 7c0b 8b4508 }
            // n = 5, score = 100
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]
            //   0fbe00               | movsx               eax, byte ptr [eax]
            //   83f841               | cmp                 eax, 0x41
            //   7c0b                 | jl                  0xd
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]

        $sequence_4 = { 50 e8???????? 59 6800511010 8d85ecf6ffff 50 }
            // n = 6, score = 100
            //   50                   | push                eax
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   6800511010           | push                0x10105100
            //   8d85ecf6ffff         | lea                 eax, [ebp - 0x914]
            //   50                   | push                eax

        $sequence_5 = { 8b4508 0345fc 894508 e9???????? 33c0 5e }
            // n = 6, score = 100
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]
            //   0345fc               | add                 eax, dword ptr [ebp - 4]
            //   894508               | mov                 dword ptr [ebp + 8], eax
            //   e9????????           |                     
            //   33c0                 | xor                 eax, eax
            //   5e                   | pop                 esi

        $sequence_6 = { c20c00 55 8bec 6a00 ff35???????? }
            // n = 5, score = 100
            //   c20c00               | ret                 0xc
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   6a00                 | push                0
            //   ff35????????         |                     

        $sequence_7 = { 0fbe00 83f839 7e4b 8b45f8 0fbe00 }
            // n = 5, score = 100
            //   0fbe00               | movsx               eax, byte ptr [eax]
            //   83f839               | cmp                 eax, 0x39
            //   7e4b                 | jle                 0x4d
            //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
            //   0fbe00               | movsx               eax, byte ptr [eax]

        $sequence_8 = { 68ec421010 ff35???????? 6aff ff15???????? }
            // n = 4, score = 100
            //   68ec421010           | push                0x101042ec
            //   ff35????????         |                     
            //   6aff                 | push                -1
            //   ff15????????         |                     

        $sequence_9 = { ffb5eef7ffff ff15???????? 0fb7c0 83f819 }
            // n = 4, score = 100
            //   ffb5eef7ffff         | push                dword ptr [ebp - 0x812]
            //   ff15????????         |                     
            //   0fb7c0               | movzx               eax, ax
            //   83f819               | cmp                 eax, 0x19

    condition:
        7 of them and filesize < 2170880
}