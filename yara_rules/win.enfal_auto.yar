rule win_enfal_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.enfal."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.enfal"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8d85b4f9ffff 50 e8???????? 83c414 8d45f0 897df0 }
            // n = 6, score = 200
            //   8d85b4f9ffff         | lea                 eax, [ebp - 0x64c]
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c414               | add                 esp, 0x14
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   897df0               | mov                 dword ptr [ebp - 0x10], edi

        $sequence_1 = { 80a5b4f5ffff00 f3ab 66ab aa 8bca 33c0 }
            // n = 6, score = 200
            //   80a5b4f5ffff00       | and                 byte ptr [ebp - 0xa4c], 0
            //   f3ab                 | rep stosd           dword ptr es:[edi], eax
            //   66ab                 | stosw               word ptr es:[edi], ax
            //   aa                   | stosb               byte ptr es:[edi], al
            //   8bca                 | mov                 ecx, edx
            //   33c0                 | xor                 eax, eax

        $sequence_2 = { 837b1800 8945ec 0f86a6000000 894df4 8955f8 8b4dfc }
            // n = 6, score = 200
            //   837b1800             | cmp                 dword ptr [ebx + 0x18], 0
            //   8945ec               | mov                 dword ptr [ebp - 0x14], eax
            //   0f86a6000000         | jbe                 0xac
            //   894df4               | mov                 dword ptr [ebp - 0xc], ecx
            //   8955f8               | mov                 dword ptr [ebp - 8], edx
            //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]

        $sequence_3 = { 83c40c 8d45f4 50 8d45f8 50 68???????? ff7508 }
            // n = 7, score = 200
            //   83c40c               | add                 esp, 0xc
            //   8d45f4               | lea                 eax, [ebp - 0xc]
            //   50                   | push                eax
            //   8d45f8               | lea                 eax, [ebp - 8]
            //   50                   | push                eax
            //   68????????           |                     
            //   ff7508               | push                dword ptr [ebp + 8]

        $sequence_4 = { 8b4e04 8b4610 0faf4d08 03c1 80382d }
            // n = 5, score = 200
            //   8b4e04               | mov                 ecx, dword ptr [esi + 4]
            //   8b4610               | mov                 eax, dword ptr [esi + 0x10]
            //   0faf4d08             | imul                ecx, dword ptr [ebp + 8]
            //   03c1                 | add                 eax, ecx
            //   80382d               | cmp                 byte ptr [eax], 0x2d

        $sequence_5 = { 8d85d4feffff 50 e8???????? ff75f4 c745f001000000 ff7508 }
            // n = 6, score = 200
            //   8d85d4feffff         | lea                 eax, [ebp - 0x12c]
            //   50                   | push                eax
            //   e8????????           |                     
            //   ff75f4               | push                dword ptr [ebp - 0xc]
            //   c745f001000000       | mov                 dword ptr [ebp - 0x10], 1
            //   ff7508               | push                dword ptr [ebp + 8]

        $sequence_6 = { c9 c3 8b45f0 ebf6 8b4c2408 6a01 58 }
            // n = 7, score = 200
            //   c9                   | leave               
            //   c3                   | ret                 
            //   8b45f0               | mov                 eax, dword ptr [ebp - 0x10]
            //   ebf6                 | jmp                 0xfffffff8
            //   8b4c2408             | mov                 ecx, dword ptr [esp + 8]
            //   6a01                 | push                1
            //   58                   | pop                 eax

        $sequence_7 = { 8d8568ffffff 56 53 50 e8???????? 56 }
            // n = 6, score = 200
            //   8d8568ffffff         | lea                 eax, [ebp - 0x98]
            //   56                   | push                esi
            //   53                   | push                ebx
            //   50                   | push                eax
            //   e8????????           |                     
            //   56                   | push                esi

        $sequence_8 = { 46 c1e802 3bf0 72d8 }
            // n = 4, score = 200
            //   46                   | inc                 esi
            //   c1e802               | shr                 eax, 2
            //   3bf0                 | cmp                 esi, eax
            //   72d8                 | jb                  0xffffffda

        $sequence_9 = { 57 50 ff15???????? 6a2f 6a4c 57 e8???????? }
            // n = 7, score = 200
            //   57                   | push                edi
            //   50                   | push                eax
            //   ff15????????         |                     
            //   6a2f                 | push                0x2f
            //   6a4c                 | push                0x4c
            //   57                   | push                edi
            //   e8????????           |                     

    condition:
        7 of them and filesize < 65536
}