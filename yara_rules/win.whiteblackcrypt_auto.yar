rule win_whiteblackcrypt_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.whiteblackcrypt."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.whiteblackcrypt"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 41c6442cff00 e8???????? 4c39e6 89c5 0f84b6feffff 4c89e1 }
            // n = 6, score = 100
            //   41c6442cff00         | dec                 eax
            //   e8????????           |                     
            //   4c39e6               | mov                 ebx, ecx
            //   89c5                 | push                edi
            //   0f84b6feffff         | push                esi
            //   4c89e1               | push                ebx

        $sequence_1 = { 4489f0 4883c9ff 4889ef f2ae 4c89ef 4889cb }
            // n = 6, score = 100
            //   4489f0               | pxor                xmm2, xmm2
            //   4883c9ff             | cvtsi2sd            xmm2, edx
            //   4889ef               | ucomisd             xmm3, xmm0
            //   f2ae                 | jp                  0x2a5
            //   4c89ef               | jne                 0x2a5
            //   4889cb               | mov                 dword ptr [eax], 0x22

        $sequence_2 = { 4889f2 4889d9 db6c2450 48896c2430 }
            // n = 4, score = 100
            //   4889f2               | inc                 edx
            //   4889d9               | xor                 dh, byte ptr [ebx + ecx]
            //   db6c2450             | inc                 ecx
            //   48896c2430           | mov                 ecx, esi

        $sequence_3 = { 48ffc8 4883f8ff 75e3 eb0b }
            // n = 4, score = 100
            //   48ffc8               | test                ebx, ebx
            //   4883f8ff             | mov                 dword ptr [eax], 0
            //   75e3                 | je                  0x1bc
            //   eb0b                 | dec                 eax

        $sequence_4 = { c744243864000000 c7442430f4010000 c744242800000080 c744242000000080 }
            // n = 4, score = 100
            //   c744243864000000     | dec                 ax
            //   c7442430f4010000     | movd                mm5, edi
            //   c744242800000080     | movsd               qword ptr [esp + 0x30], xmm5
            //   c744242000000080     | dec                 esp

        $sequence_5 = { 4889c6 4889c7 4489f0 f3aa 4889f1 e8???????? }
            // n = 6, score = 100
            //   4889c6               | jne                 0xe84
            //   4889c7               | dec                 eax
            //   4489f0               | lea                 ebx, [esp + 0xa8]
            //   f3aa                 | xor                 ecx, ecx
            //   4889f1               | cmp                 byte ptr [esi + 0x244], 0
            //   e8????????           |                     

        $sequence_6 = { 4881ecb0030000 4c8d0504420000 31c0 41b9ffff0000 }
            // n = 4, score = 100
            //   4881ecb0030000       | inc                 ecx
            //   4c8d0504420000       | mov                 dl, byte ptr [ebx + 7]
            //   31c0                 | inc                 ecx
            //   41b9ffff0000         | mov                 byte ptr [ebx + 7], al

        $sequence_7 = { 8801 48ffc1 ebe8 c3 55 }
            // n = 5, score = 100
            //   8801                 | mov                 eax, 0x2a
            //   48ffc1               | mov                 ecx, 0x20
            //   ebe8                 | dec                 eax
            //   c3                   | lea                 edx, [esi + 0x130]
            //   55                   | mov                 word ptr [ebx], ax

        $sequence_8 = { 458848ff 4d39c4 7584 89d9 4989f0 4c89da }
            // n = 6, score = 100
            //   458848ff             | mov                 ecx, 1
            //   4d39c4               | dec                 eax
            //   7584                 | lea                 edx, [0x2a69]
            //   89d9                 | dec                 ax
            //   4989f0               | movd                mm3, ebp
            //   4c89da               | dec                 ax

        $sequence_9 = { d9c0 4883ec08 d97c2404 0fb7442404 80cc0c 66890424 }
            // n = 6, score = 100
            //   d9c0                 | inc                 esp
            //   4883ec08             | mov                 ecx, edi
            //   d97c2404             | inc                 esp
            //   0fb7442404           | xor                 eax, edx
            //   80cc0c               | inc                 esp
            //   66890424             | xor                 ecx, esi

    condition:
        7 of them and filesize < 99328
}