rule win_ryuk_stealer_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.ryuk_stealer."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.ryuk_stealer"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8bf0 ff15???????? 85c0 7518 85f6 7414 }
            // n = 6, score = 800
            //   8bf0                 | mov                 esi, eax
            //   ff15????????         |                     
            //   85c0                 | test                eax, eax
            //   7518                 | jne                 0x1a
            //   85f6                 | test                esi, esi
            //   7414                 | je                  0x16

        $sequence_1 = { f7f1 8bf2 e8???????? 8bc8 33d2 8bc6 }
            // n = 6, score = 800
            //   f7f1                 | div                 ecx
            //   8bf2                 | mov                 esi, edx
            //   e8????????           |                     
            //   8bc8                 | mov                 ecx, eax
            //   33d2                 | xor                 edx, edx
            //   8bc6                 | mov                 eax, esi

        $sequence_2 = { f7f1 8bf2 e8???????? 8bc8 33d2 8bc6 f7f1 }
            // n = 7, score = 800
            //   f7f1                 | div                 ecx
            //   8bf2                 | mov                 esi, edx
            //   e8????????           |                     
            //   8bc8                 | mov                 ecx, eax
            //   33d2                 | xor                 edx, edx
            //   8bc6                 | mov                 eax, esi
            //   f7f1                 | div                 ecx

        $sequence_3 = { 8d95b4fdffff 8bf2 668b02 83c202 }
            // n = 4, score = 800
            //   8d95b4fdffff         | lea                 edx, [ebp - 0x24c]
            //   8bf2                 | mov                 esi, edx
            //   668b02               | mov                 ax, word ptr [edx]
            //   83c202               | add                 edx, 2

        $sequence_4 = { 8a443706 3c2f 7404 3c2d }
            // n = 4, score = 800
            //   8a443706             | mov                 al, byte ptr [edi + esi + 6]
            //   3c2f                 | cmp                 al, 0x2f
            //   7404                 | je                  6
            //   3c2d                 | cmp                 al, 0x2d

        $sequence_5 = { 83f805 740a b9???????? e8???????? 46 }
            // n = 5, score = 800
            //   83f805               | cmp                 eax, 5
            //   740a                 | je                  0xc
            //   b9????????           |                     
            //   e8????????           |                     
            //   46                   | inc                 esi

        $sequence_6 = { 6800000080 51 ff15???????? 8bf8 83ffff 7507 0bc0 }
            // n = 7, score = 800
            //   6800000080           | push                0x80000000
            //   51                   | push                ecx
            //   ff15????????         |                     
            //   8bf8                 | mov                 edi, eax
            //   83ffff               | cmp                 edi, -1
            //   7507                 | jne                 9
            //   0bc0                 | or                  eax, eax

        $sequence_7 = { 8d4902 6685c0 75f5 6a04 6800100000 }
            // n = 5, score = 800
            //   8d4902               | lea                 ecx, [ecx + 2]
            //   6685c0               | test                ax, ax
            //   75f5                 | jne                 0xfffffff7
            //   6a04                 | push                4
            //   6800100000           | push                0x1000

        $sequence_8 = { 6800000080 51 ff15???????? 8bf8 83ffff 7507 }
            // n = 6, score = 800
            //   6800000080           | push                0x80000000
            //   51                   | push                ecx
            //   ff15????????         |                     
            //   8bf8                 | mov                 edi, eax
            //   83ffff               | cmp                 edi, -1
            //   7507                 | jne                 9

        $sequence_9 = { 68???????? e8???????? 83c40c ff15???????? 8bf8 }
            // n = 5, score = 800
            //   68????????           |                     
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   ff15????????         |                     
            //   8bf8                 | mov                 edi, eax

    condition:
        7 of them and filesize < 368640
}