rule win_metadatabin_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.metadatabin."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.metadatabin"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 89e5 56 8b5514 8b7508 8b4d10 c1e203 85d2 }
            // n = 7, score = 100
            //   89e5                 | mov                 ebp, esp
            //   56                   | push                esi
            //   8b5514               | mov                 edx, dword ptr [ebp + 0x14]
            //   8b7508               | mov                 esi, dword ptr [ebp + 8]
            //   8b4d10               | mov                 ecx, dword ptr [ebp + 0x10]
            //   c1e203               | shl                 edx, 3
            //   85d2                 | test                edx, edx

        $sequence_1 = { 8b45f0 894310 f20f1045e0 f20f104de8 f20f114b08 f20f1103 83c428 }
            // n = 7, score = 100
            //   8b45f0               | mov                 eax, dword ptr [ebp - 0x10]
            //   894310               | mov                 dword ptr [ebx + 0x10], eax
            //   f20f1045e0           | movsd               xmm0, qword ptr [ebp - 0x20]
            //   f20f104de8           | movsd               xmm1, qword ptr [ebp - 0x18]
            //   f20f114b08           | movsd               qword ptr [ebx + 8], xmm1
            //   f20f1103             | movsd               qword ptr [ebx], xmm0
            //   83c428               | add                 esp, 0x28

        $sequence_2 = { b001 7527 8b4df0 f60104 8b4118 8b491c 8b490c }
            // n = 7, score = 100
            //   b001                 | mov                 al, 1
            //   7527                 | jne                 0x29
            //   8b4df0               | mov                 ecx, dword ptr [ebp - 0x10]
            //   f60104               | test                byte ptr [ecx], 4
            //   8b4118               | mov                 eax, dword ptr [ecx + 0x18]
            //   8b491c               | mov                 ecx, dword ptr [ecx + 0x1c]
            //   8b490c               | mov                 ecx, dword ptr [ecx + 0xc]

        $sequence_3 = { 0f45c1 89d1 8b9578ffffff 85c9 898df4feffff 8995ccfeffff 0f958510ffffff }
            // n = 7, score = 100
            //   0f45c1               | cmovne              eax, ecx
            //   89d1                 | mov                 ecx, edx
            //   8b9578ffffff         | mov                 edx, dword ptr [ebp - 0x88]
            //   85c9                 | test                ecx, ecx
            //   898df4feffff         | mov                 dword ptr [ebp - 0x10c], ecx
            //   8995ccfeffff         | mov                 dword ptr [ebp - 0x134], edx
            //   0f958510ffffff       | setne               byte ptr [ebp - 0xf0]

        $sequence_4 = { baffff0700 660f6e842494000000 83d700 89842484000000 83d600 21d3 baffffffff }
            // n = 7, score = 100
            //   baffff0700           | mov                 edx, 0x7ffff
            //   660f6e842494000000     | movd    xmm0, dword ptr [esp + 0x94]
            //   83d700               | adc                 edi, 0
            //   89842484000000       | mov                 dword ptr [esp + 0x84], eax
            //   83d600               | adc                 esi, 0
            //   21d3                 | and                 ebx, edx
            //   baffffffff           | mov                 edx, 0xffffffff

        $sequence_5 = { 89d6 01cf 83d600 f7e3 01f8 89d1 8b7c2434 }
            // n = 7, score = 100
            //   89d6                 | mov                 esi, edx
            //   01cf                 | add                 edi, ecx
            //   83d600               | adc                 esi, 0
            //   f7e3                 | mul                 ebx
            //   01f8                 | add                 eax, edi
            //   89d1                 | mov                 ecx, edx
            //   8b7c2434             | mov                 edi, dword ptr [esp + 0x34]

        $sequence_6 = { f7e3 8b5c240c 01c8 898424c0010000 0fb6442420 11c2 89d8 }
            // n = 7, score = 100
            //   f7e3                 | mul                 ebx
            //   8b5c240c             | mov                 ebx, dword ptr [esp + 0xc]
            //   01c8                 | add                 eax, ecx
            //   898424c0010000       | mov                 dword ptr [esp + 0x1c0], eax
            //   0fb6442420           | movzx               eax, byte ptr [esp + 0x20]
            //   11c2                 | adc                 edx, eax
            //   89d8                 | mov                 eax, ebx

        $sequence_7 = { c78424d003000038000000 c684240c0400005c c78424d003000039000000 c684240d0400005c c78424d00300003a000000 c684240e0400005c c78424d00300003b000000 }
            // n = 7, score = 100
            //   c78424d003000038000000     | mov    dword ptr [esp + 0x3d0], 0x38
            //   c684240c0400005c     | mov                 byte ptr [esp + 0x40c], 0x5c
            //   c78424d003000039000000     | mov    dword ptr [esp + 0x3d0], 0x39
            //   c684240d0400005c     | mov                 byte ptr [esp + 0x40d], 0x5c
            //   c78424d00300003a000000     | mov    dword ptr [esp + 0x3d0], 0x3a
            //   c684240e0400005c     | mov                 byte ptr [esp + 0x40e], 0x5c
            //   c78424d00300003b000000     | mov    dword ptr [esp + 0x3d0], 0x3b

        $sequence_8 = { 89d6 8944246c 8b442410 11fe 8bbc24cc000000 0f92c3 f7e1 }
            // n = 7, score = 100
            //   89d6                 | mov                 esi, edx
            //   8944246c             | mov                 dword ptr [esp + 0x6c], eax
            //   8b442410             | mov                 eax, dword ptr [esp + 0x10]
            //   11fe                 | adc                 esi, edi
            //   8bbc24cc000000       | mov                 edi, dword ptr [esp + 0xcc]
            //   0f92c3               | setb                bl
            //   f7e1                 | mul                 ecx

        $sequence_9 = { 8b4114 51 ff500c 83c404 e9???????? 0fb6464c 83f803 }
            // n = 7, score = 100
            //   8b4114               | mov                 eax, dword ptr [ecx + 0x14]
            //   51                   | push                ecx
            //   ff500c               | call                dword ptr [eax + 0xc]
            //   83c404               | add                 esp, 4
            //   e9????????           |                     
            //   0fb6464c             | movzx               eax, byte ptr [esi + 0x4c]
            //   83f803               | cmp                 eax, 3

    condition:
        7 of them and filesize < 1263616
}