rule win_doppelpaymer_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.doppelpaymer."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.doppelpaymer"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { baffffff7f 43 e8???????? 3bd8 }
            // n = 4, score = 700
            //   baffffff7f           | mov                 edx, 0x7fffffff
            //   43                   | inc                 ebx
            //   e8????????           |                     
            //   3bd8                 | cmp                 ebx, eax

        $sequence_1 = { e8???????? 8b08 e8???????? 3db6389096 }
            // n = 4, score = 700
            //   e8????????           |                     
            //   8b08                 | mov                 ecx, dword ptr [eax]
            //   e8????????           |                     
            //   3db6389096           | cmp                 eax, 0x969038b6

        $sequence_2 = { 80790600 7523 80790264 751d }
            // n = 4, score = 700
            //   80790600             | cmp                 byte ptr [ecx + 6], 0
            //   7523                 | jne                 0x25
            //   80790264             | cmp                 byte ptr [ecx + 2], 0x64
            //   751d                 | jne                 0x1f

        $sequence_3 = { 80790561 7517 80790361 7511 80790474 750b }
            // n = 6, score = 700
            //   80790561             | cmp                 byte ptr [ecx + 5], 0x61
            //   7517                 | jne                 0x19
            //   80790361             | cmp                 byte ptr [ecx + 3], 0x61
            //   7511                 | jne                 0x13
            //   80790474             | cmp                 byte ptr [ecx + 4], 0x74
            //   750b                 | jne                 0xd

        $sequence_4 = { 80790264 751d 80790561 7517 }
            // n = 4, score = 700
            //   80790264             | cmp                 byte ptr [ecx + 2], 0x64
            //   751d                 | jne                 0x1f
            //   80790561             | cmp                 byte ptr [ecx + 5], 0x61
            //   7517                 | jne                 0x19

        $sequence_5 = { 83ec28 6800002002 6a00 6a01 }
            // n = 4, score = 700
            //   83ec28               | sub                 esp, 0x28
            //   6800002002           | push                0x2200000
            //   6a00                 | push                0
            //   6a01                 | push                1

        $sequence_6 = { 8d4c2414 e8???????? 6a0f 8bcb 6a07 5a }
            // n = 6, score = 600
            //   8d4c2414             | lea                 ecx, [esp + 0x14]
            //   e8????????           |                     
            //   6a0f                 | push                0xf
            //   8bcb                 | mov                 ecx, ebx
            //   6a07                 | push                7
            //   5a                   | pop                 edx

        $sequence_7 = { 8d4c2414 e8???????? 84c0 7511 }
            // n = 4, score = 600
            //   8d4c2414             | lea                 ecx, [esp + 0x14]
            //   e8????????           |                     
            //   84c0                 | test                al, al
            //   7511                 | jne                 0x13

        $sequence_8 = { 8b559c 8b75b0 035604 8b7e50 897db8 8b7e3c 897dbc }
            // n = 7, score = 100
            //   8b559c               | mov                 edx, dword ptr [ebp - 0x64]
            //   8b75b0               | mov                 esi, dword ptr [ebp - 0x50]
            //   035604               | add                 edx, dword ptr [esi + 4]
            //   8b7e50               | mov                 edi, dword ptr [esi + 0x50]
            //   897db8               | mov                 dword ptr [ebp - 0x48], edi
            //   8b7e3c               | mov                 edi, dword ptr [esi + 0x3c]
            //   897dbc               | mov                 dword ptr [ebp - 0x44], edi

        $sequence_9 = { 89c6 83c601 8b7db4 39fe }
            // n = 4, score = 100
            //   89c6                 | mov                 esi, eax
            //   83c601               | add                 esi, 1
            //   8b7db4               | mov                 edi, dword ptr [ebp - 0x4c]
            //   39fe                 | cmp                 esi, edi

        $sequence_10 = { 8b4588 83c008 8b4d80 894da4 8945a0 8b45a0 8b4da4 }
            // n = 7, score = 100
            //   8b4588               | mov                 eax, dword ptr [ebp - 0x78]
            //   83c008               | add                 eax, 8
            //   8b4d80               | mov                 ecx, dword ptr [ebp - 0x80]
            //   894da4               | mov                 dword ptr [ebp - 0x5c], ecx
            //   8945a0               | mov                 dword ptr [ebp - 0x60], eax
            //   8b45a0               | mov                 eax, dword ptr [ebp - 0x60]
            //   8b4da4               | mov                 ecx, dword ptr [ebp - 0x5c]

        $sequence_11 = { c20400 3ad1 740c 80fa3f }
            // n = 4, score = 100
            //   c20400               | ret                 4
            //   3ad1                 | cmp                 dl, cl
            //   740c                 | je                  0xe
            //   80fa3f               | cmp                 dl, 0x3f

        $sequence_12 = { 31c9 c745f469d9900b 8b5034 8b4008 8955f0 8945ec }
            // n = 6, score = 100
            //   31c9                 | xor                 ecx, ecx
            //   c745f469d9900b       | mov                 dword ptr [ebp - 0xc], 0xb90d969
            //   8b5034               | mov                 edx, dword ptr [eax + 0x34]
            //   8b4008               | mov                 eax, dword ptr [eax + 8]
            //   8955f0               | mov                 dword ptr [ebp - 0x10], edx
            //   8945ec               | mov                 dword ptr [ebp - 0x14], eax

        $sequence_13 = { 8b45f0 3508fcb97e 21fb 8bbd58ffffff c1e704 01fe }
            // n = 6, score = 100
            //   8b45f0               | mov                 eax, dword ptr [ebp - 0x10]
            //   3508fcb97e           | xor                 eax, 0x7eb9fc08
            //   21fb                 | and                 ebx, edi
            //   8bbd58ffffff         | mov                 edi, dword ptr [ebp - 0xa8]
            //   c1e704               | shl                 edi, 4
            //   01fe                 | add                 esi, edi

        $sequence_14 = { c20400 33f6 8b4dfc 8d95f4feffff 894e0c }
            // n = 5, score = 100
            //   c20400               | ret                 4
            //   33f6                 | xor                 esi, esi
            //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]
            //   8d95f4feffff         | lea                 edx, [ebp - 0x10c]
            //   894e0c               | mov                 dword ptr [esi + 0xc], ecx

        $sequence_15 = { 31d2 be58000000 8b7950 897de0 8b793c }
            // n = 5, score = 100
            //   31d2                 | xor                 edx, edx
            //   be58000000           | mov                 esi, 0x58
            //   8b7950               | mov                 edi, dword ptr [ecx + 0x50]
            //   897de0               | mov                 dword ptr [ebp - 0x20], edi
            //   8b793c               | mov                 edi, dword ptr [ecx + 0x3c]

        $sequence_16 = { 39d0 8945dc 72ca 8b45e4 83c001 3dff000000 }
            // n = 6, score = 100
            //   39d0                 | cmp                 eax, edx
            //   8945dc               | mov                 dword ptr [ebp - 0x24], eax
            //   72ca                 | jb                  0xffffffcc
            //   8b45e4               | mov                 eax, dword ptr [ebp - 0x1c]
            //   83c001               | add                 eax, 1
            //   3dff000000           | cmp                 eax, 0xff

        $sequence_17 = { 8945a0 8b45b0 8b4054 89459c 8b45b0 8b402c }
            // n = 6, score = 100
            //   8945a0               | mov                 dword ptr [ebp - 0x60], eax
            //   8b45b0               | mov                 eax, dword ptr [ebp - 0x50]
            //   8b4054               | mov                 eax, dword ptr [eax + 0x54]
            //   89459c               | mov                 dword ptr [ebp - 0x64], eax
            //   8b45b0               | mov                 eax, dword ptr [ebp - 0x50]
            //   8b402c               | mov                 eax, dword ptr [eax + 0x2c]

    condition:
        7 of them and filesize < 7266304
}