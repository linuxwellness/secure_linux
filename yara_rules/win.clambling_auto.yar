rule win_clambling_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.clambling."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.clambling"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 498bf8 488bf1 4885c0 7525 }
            // n = 4, score = 300
            //   498bf8               | dec                 dword ptr [ebx + 0x10]
            //   488bf1               | dec                 eax
            //   4885c0               | mov                 eax, dword ptr [ecx]
            //   7525                 | dec                 eax

        $sequence_1 = { e9???????? ba23000000 e9???????? ba40000000 e9???????? ba21000000 }
            // n = 6, score = 300
            //   e9????????           |                     
            //   ba23000000           | xor                 edx, edx
            //   e9????????           |                     
            //   ba40000000           | xor                 ecx, ecx
            //   e9????????           |                     
            //   ba21000000           | inc                 esp

        $sequence_2 = { 488bcf e8???????? ebb8 8b742428 483bfb 7409 488bcf }
            // n = 7, score = 300
            //   488bcf               | mov                 dword ptr [ebx + ecx*4 + 0x142d8], eax
            //   e8????????           |                     
            //   ebb8                 | dec                 eax
            //   8b742428             | arpl                word ptr [ebx + 0x1429c], ax
            //   483bfb               | mov                 byte ptr [eax + ebx + 0x182e8], 0x28
            //   7409                 | mov                 eax, dword ptr [ebx + 0x1429c]
            //   488bcf               | dec                 eax

        $sequence_3 = { 3bc3 751f 8b4c2428 488d942490020000 ff15???????? }
            // n = 5, score = 300
            //   3bc3                 | xor                 ecx, ecx
            //   751f                 | inc                 ebp
            //   8b4c2428             | lea                 eax, [ecx + 3]
            //   488d942490020000     | dec                 eax
            //   ff15????????         |                     

        $sequence_4 = { 41b920020000 4889442450 44896c2448 44896c2440 44896c2438 }
            // n = 5, score = 300
            //   41b920020000         | movzx               eax, word ptr [eax + 4]
            //   4889442450           | mov                 eax, 0x34
            //   44896c2448           | dec                 esp
            //   44896c2440           | arpl                bx, ax
            //   44896c2438           | mov                 word ptr [ebp + 0x20], ax

        $sequence_5 = { 3bf1 8bf9 7e6d 8b6c2434 }
            // n = 4, score = 300
            //   3bf1                 | dec                 eax
            //   8bf9                 | mov                 dword ptr [ecx + 0x50], eax
            //   7e6d                 | xor                 edx, edx
            //   8b6c2434             | dec                 eax

        $sequence_6 = { 7414 83f803 7508 c70701000000 eb13 }
            // n = 5, score = 300
            //   7414                 | dec                 eax
            //   83f803               | add                 ecx, 0x120
            //   7508                 | dec                 eax
            //   c70701000000         | cmp                 dword ptr [ebx + 0xe0], 0
            //   eb13                 | dec                 eax

        $sequence_7 = { 89742430 4533c9 b201 89742428 89742420 ff15???????? }
            // n = 6, score = 300
            //   89742430             | cmp                 eax, ebx
            //   4533c9               | jl                  0x15ef
            //   b201                 | jmp                 0x167c
            //   89742428             | jmp                 0x1676
            //   89742420             | dec                 esp
            //   ff15????????         |                     

        $sequence_8 = { 3bfe 7cdd 3bfe 668b5c2430 8b6c2458 }
            // n = 5, score = 300
            //   3bfe                 | lea                 ecx, [edi + 0x198]
            //   7cdd                 | cmp                 dword ptr [edi + 0x1c8], 3
            //   3bfe                 | jne                 0x101a
            //   668b5c2430           | inc                 esp
            //   8b6c2458             | mov                 dword ptr [edi + 0x1c8], ebp

        $sequence_9 = { ff15???????? 4c8d442458 8d5308 488bc8 }
            // n = 4, score = 300
            //   ff15????????         |                     
            //   4c8d442458           | dec                 eax
            //   8d5308               | inc                 dword ptr [ebx + 0x19328]
            //   488bc8               | mov                 word ptr [esp + 0x34], ax

    condition:
        7 of them and filesize < 412672
}