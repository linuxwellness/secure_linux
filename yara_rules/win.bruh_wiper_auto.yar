rule win_bruh_wiper_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.bruh_wiper."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.bruh_wiper"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8d45f0 50 6a06 6a00 6a00 }
            // n = 5, score = 100
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   50                   | push                eax
            //   6a06                 | push                6
            //   6a00                 | push                0
            //   6a00                 | push                0

        $sequence_1 = { 6a04 58 6bc000 c7803450a02902000000 6a04 58 }
            // n = 6, score = 100
            //   6a04                 | push                4
            //   58                   | pop                 eax
            //   6bc000               | imul                eax, eax, 0
            //   c7803450a02902000000     | mov    dword ptr [eax + 0x29a05034], 2
            //   6a04                 | push                4
            //   58                   | pop                 eax

        $sequence_2 = { 6a13 ffd7 8d45f0 50 6a06 6a00 6a00 }
            // n = 7, score = 100
            //   6a13                 | push                0x13
            //   ffd7                 | call                edi
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   50                   | push                eax
            //   6a06                 | push                6
            //   6a00                 | push                0
            //   6a00                 | push                0

        $sequence_3 = { 6a01 6a13 ffd7 8d45f0 50 }
            // n = 5, score = 100
            //   6a01                 | push                1
            //   6a13                 | push                0x13
            //   ffd7                 | call                edi
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   50                   | push                eax

        $sequence_4 = { 8d85fcfdffff 6a00 50 e8???????? 83c40c be01080000 }
            // n = 6, score = 100
            //   8d85fcfdffff         | lea                 eax, [ebp - 0x204]
            //   6a00                 | push                0
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   be01080000           | mov                 esi, 0x801

        $sequence_5 = { 8945fc 66a1???????? 668945f4 a0???????? 56 8845f6 }
            // n = 6, score = 100
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   66a1????????         |                     
            //   668945f4             | mov                 word ptr [ebp - 0xc], ax
            //   a0????????           |                     
            //   56                   | push                esi
            //   8845f6               | mov                 byte ptr [ebp - 0xa], al

        $sequence_6 = { 6a00 6a01 6a13 ffd7 8d45f0 50 6a06 }
            // n = 7, score = 100
            //   6a00                 | push                0
            //   6a01                 | push                1
            //   6a13                 | push                0x13
            //   ffd7                 | call                edi
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   50                   | push                eax
            //   6a06                 | push                6

        $sequence_7 = { 6800000040 68???????? ff15???????? 8b1d???????? 8bf8 6a00 8d85f8fdffff }
            // n = 7, score = 100
            //   6800000040           | push                0x40000000
            //   68????????           |                     
            //   ff15????????         |                     
            //   8b1d????????         |                     
            //   8bf8                 | mov                 edi, eax
            //   6a00                 | push                0
            //   8d85f8fdffff         | lea                 eax, [ebp - 0x208]

        $sequence_8 = { 7503 c1e808 e8???????? e8???????? 68???????? 68???????? ff15???????? }
            // n = 7, score = 100
            //   7503                 | jne                 5
            //   c1e808               | shr                 eax, 8
            //   e8????????           |                     
            //   e8????????           |                     
            //   68????????           |                     
            //   68????????           |                     
            //   ff15????????         |                     

        $sequence_9 = { 6800200000 68???????? 57 ffd3 }
            // n = 4, score = 100
            //   6800200000           | push                0x2000
            //   68????????           |                     
            //   57                   | push                edi
            //   ffd3                 | call                ebx

    condition:
        7 of them and filesize < 65536
}