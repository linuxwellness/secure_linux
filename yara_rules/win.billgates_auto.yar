rule win_billgates_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.billgates."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.billgates"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 7408 3c22 7404 3c30 7504 }
            // n = 5, score = 200
            //   7408                 | xor                 al, al
            //   3c22                 | dec                 eax
            //   7404                 | mov                 ecx, dword ptr [esp + 0x40]
            //   3c30                 | dec                 eax
            //   7504                 | mov                 dword ptr [edi + 0x20], 0xf

        $sequence_1 = { 3bf0 7604 2bf0 eb04 2bc6 }
            // n = 5, score = 200
            //   3bf0                 | inc                 ecx
            //   7604                 | mov                 eax, 8
            //   2bf0                 | dec                 eax
            //   eb04                 | mov                 ecx, ebx
            //   2bc6                 | jmp                 0xde

        $sequence_2 = { 750c ff15???????? 8bd8 f7db }
            // n = 4, score = 200
            //   750c                 | push                edi
            //   ff15????????         |                     
            //   8bd8                 | dec                 eax
            //   f7db                 | sub                 esp, 0x20

        $sequence_3 = { 3c21 7408 3c23 7404 3c24 }
            // n = 5, score = 200
            //   3c21                 | lea                 edx, [ebp + 0x1c]
            //   7408                 | mul                 ecx
            //   3c23                 | shr                 edx, 2
            //   7404                 | lea                 eax, [edx + edx*4]
            //   3c24                 | lea                 edx, [ebp + 0x28]

        $sequence_4 = { 3c11 7408 3c22 7404 }
            // n = 4, score = 200
            //   3c11                 | cmp                 ecx, dword ptr [esp + 0x2c]
            //   7408                 | jbe                 0x1bf
            //   3c22                 | sub                 eax, dword ptr [esp + 0x2c]
            //   7404                 | mov                 ecx, edi

        $sequence_5 = { ff15???????? 83f8ff 7508 ff15???????? f7d8 85c0 }
            // n = 6, score = 200
            //   ff15????????         |                     
            //   83f8ff               | dec                 esp
            //   7508                 | mov                 eax, ebp
            //   ff15????????         |                     
            //   f7d8                 | dec                 eax
            //   85c0                 | lea                 edx, [esp + 0x48]

        $sequence_6 = { 3c10 740c 3c11 7408 3c22 7404 }
            // n = 6, score = 200
            //   3c10                 | mov                 byte ptr [ebp], cl
            //   740c                 | dec                 eax
            //   3c11                 | inc                 ebp
            //   7408                 | xor                 al, al
            //   3c22                 | mov                 esi, ebx
            //   7404                 | xor                 al, al

        $sequence_7 = { 740c 3c11 7408 3c22 7404 3c30 7504 }
            // n = 7, score = 200
            //   740c                 | mov                 ebx, dword ptr [ebx + 0x30]
            //   3c11                 | dec                 ecx
            //   7408                 | mov                 ebp, dword ptr [ebx + 0x38]
            //   3c22                 | dec                 eax
            //   7404                 | mov                 dword ptr [esp + 0x78], ebp
            //   3c30                 | dec                 eax
            //   7504                 | mov                 ecx, dword ptr [esp + 0x50]

        $sequence_8 = { 3c21 7408 3c23 7404 }
            // n = 4, score = 200
            //   3c21                 | mov                 eax, dword ptr [ebx + 0xc]
            //   7408                 | cmp                 ebx, dword ptr [eax + 0x18]
            //   3c23                 | jne                 0x1d
            //   7404                 | mov                 eax, dword ptr [ebx + 0x40]

        $sequence_9 = { 7408 3c22 7404 3c30 }
            // n = 4, score = 200
            //   7408                 | mov                 dword ptr [esp + 0x48], ebx
            //   3c22                 | mov                 dword ptr [esp + 0x38], ebx
            //   7404                 | push                ecx
            //   3c30                 | mov                 dword ptr [esp + 0x5c], ebx

    condition:
        7 of them and filesize < 801792
}