rule win_broler_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.broler."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.broler"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 53 e8???????? 83c40c 8bc3 c745cc0f000000 }
            // n = 5, score = 100
            //   53                   | push                ebx
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   8bc3                 | mov                 eax, ebx
            //   c745cc0f000000       | mov                 dword ptr [ebp - 0x34], 0xf

        $sequence_1 = { 333c9d08804100 8bd8 c1fb08 81e3ff000000 333c9d08844100 }
            // n = 5, score = 100
            //   333c9d08804100       | xor                 edi, dword ptr [ebx*4 + 0x418008]
            //   8bd8                 | mov                 ebx, eax
            //   c1fb08               | sar                 ebx, 8
            //   81e3ff000000         | and                 ebx, 0xff
            //   333c9d08844100       | xor                 edi, dword ptr [ebx*4 + 0x418408]

        $sequence_2 = { 83c404 6a18 8d95e4fdffff 52 33db }
            // n = 5, score = 100
            //   83c404               | add                 esp, 4
            //   6a18                 | push                0x18
            //   8d95e4fdffff         | lea                 edx, [ebp - 0x21c]
            //   52                   | push                edx
            //   33db                 | xor                 ebx, ebx

        $sequence_3 = { 0f86d6feffff 8d7801 83fffe 0f87cafeffff 8b4e14 3bcf 7331 }
            // n = 7, score = 100
            //   0f86d6feffff         | jbe                 0xfffffedc
            //   8d7801               | lea                 edi, [eax + 1]
            //   83fffe               | cmp                 edi, -2
            //   0f87cafeffff         | ja                  0xfffffed0
            //   8b4e14               | mov                 ecx, dword ptr [esi + 0x14]
            //   3bcf                 | cmp                 ecx, edi
            //   7331                 | jae                 0x33

        $sequence_4 = { 0fb680085b4100 324508 884303 8b45fc 8b4004 894508 c1f818 }
            // n = 7, score = 100
            //   0fb680085b4100       | movzx               eax, byte ptr [eax + 0x415b08]
            //   324508               | xor                 al, byte ptr [ebp + 8]
            //   884303               | mov                 byte ptr [ebx + 3], al
            //   8b45fc               | mov                 eax, dword ptr [ebp - 4]
            //   8b4004               | mov                 eax, dword ptr [eax + 4]
            //   894508               | mov                 dword ptr [ebp + 8], eax
            //   c1f818               | sar                 eax, 0x18

        $sequence_5 = { 8b55f0 331a 83c204 8918 }
            // n = 4, score = 100
            //   8b55f0               | mov                 edx, dword ptr [ebp - 0x10]
            //   331a                 | xor                 ebx, dword ptr [edx]
            //   83c204               | add                 edx, 4
            //   8918                 | mov                 dword ptr [eax], ebx

        $sequence_6 = { 837db010 8bd8 8b459c 7303 8d459c }
            // n = 5, score = 100
            //   837db010             | cmp                 dword ptr [ebp - 0x50], 0x10
            //   8bd8                 | mov                 ebx, eax
            //   8b459c               | mov                 eax, dword ptr [ebp - 0x64]
            //   7303                 | jae                 5
            //   8d459c               | lea                 eax, [ebp - 0x64]

        $sequence_7 = { 83c104 0fbf849656040000 25ff000000 8bd3 c1fa10 }
            // n = 5, score = 100
            //   83c104               | add                 ecx, 4
            //   0fbf849656040000     | movsx               eax, word ptr [esi + edx*4 + 0x456]
            //   25ff000000           | and                 eax, 0xff
            //   8bd3                 | mov                 edx, ebx
            //   c1fa10               | sar                 edx, 0x10

        $sequence_8 = { 0bf9 0fb64804 c1e610 33bae8010000 c1e118 0bce 0fb67006 }
            // n = 7, score = 100
            //   0bf9                 | or                  edi, ecx
            //   0fb64804             | movzx               ecx, byte ptr [eax + 4]
            //   c1e610               | shl                 esi, 0x10
            //   33bae8010000         | xor                 edi, dword ptr [edx + 0x1e8]
            //   c1e118               | shl                 ecx, 0x18
            //   0bce                 | or                  ecx, esi
            //   0fb67006             | movzx               esi, byte ptr [eax + 6]

        $sequence_9 = { 8d5801 52 8bc7 50 8d75b8 e8???????? 8bf0 }
            // n = 7, score = 100
            //   8d5801               | lea                 ebx, [eax + 1]
            //   52                   | push                edx
            //   8bc7                 | mov                 eax, edi
            //   50                   | push                eax
            //   8d75b8               | lea                 esi, [ebp - 0x48]
            //   e8????????           |                     
            //   8bf0                 | mov                 esi, eax

    condition:
        7 of them and filesize < 275456
}