rule win_vsingle_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.vsingle."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.vsingle"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 035508 b801000000 6bc803 b804000000 6bc000 034508 be01000000 }
            // n = 7, score = 200
            //   035508               | add                 edx, dword ptr [ebp + 8]
            //   b801000000           | mov                 eax, 1
            //   6bc803               | imul                ecx, eax, 3
            //   b804000000           | mov                 eax, 4
            //   6bc000               | imul                eax, eax, 0
            //   034508               | add                 eax, dword ptr [ebp + 8]
            //   be01000000           | mov                 esi, 1

        $sequence_1 = { 8955ec 8b45f4 8d0c85f0ffffff 894df0 8b5508 0355f0 0fb602 }
            // n = 7, score = 200
            //   8955ec               | mov                 dword ptr [ebp - 0x14], edx
            //   8b45f4               | mov                 eax, dword ptr [ebp - 0xc]
            //   8d0c85f0ffffff       | lea                 ecx, [eax*4 - 0x10]
            //   894df0               | mov                 dword ptr [ebp - 0x10], ecx
            //   8b5508               | mov                 edx, dword ptr [ebp + 8]
            //   0355f0               | add                 edx, dword ptr [ebp - 0x10]
            //   0fb602               | movzx               eax, byte ptr [edx]

        $sequence_2 = { 034dfc 8b550c 8a0402 884101 b901000000 6bd118 8b4508 }
            // n = 7, score = 200
            //   034dfc               | add                 ecx, dword ptr [ebp - 4]
            //   8b550c               | mov                 edx, dword ptr [ebp + 0xc]
            //   8a0402               | mov                 al, byte ptr [edx + eax]
            //   884101               | mov                 byte ptr [ecx + 1], al
            //   b901000000           | mov                 ecx, 1
            //   6bd118               | imul                edx, ecx, 0x18
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]

        $sequence_3 = { 8955a4 837da440 7302 eb05 e8???????? 8b45a4 }
            // n = 6, score = 200
            //   8955a4               | mov                 dword ptr [ebp - 0x5c], edx
            //   837da440             | cmp                 dword ptr [ebp - 0x5c], 0x40
            //   7302                 | jae                 4
            //   eb05                 | jmp                 7
            //   e8????????           |                     
            //   8b45a4               | mov                 eax, dword ptr [ebp - 0x5c]

        $sequence_4 = { b810000000 668945f8 c745f4f756bd64 eb20 b932000000 66894dee c745f080f00400 }
            // n = 7, score = 200
            //   b810000000           | mov                 eax, 0x10
            //   668945f8             | mov                 word ptr [ebp - 8], ax
            //   c745f4f756bd64       | mov                 dword ptr [ebp - 0xc], 0x64bd56f7
            //   eb20                 | jmp                 0x22
            //   b932000000           | mov                 ecx, 0x32
            //   66894dee             | mov                 word ptr [ebp - 0x12], cx
            //   c745f080f00400       | mov                 dword ptr [ebp - 0x10], 0x4f080

        $sequence_5 = { 8b55fc 83c201 8955fc ebce b801000000 6bc809 }
            // n = 6, score = 200
            //   8b55fc               | mov                 edx, dword ptr [ebp - 4]
            //   83c201               | add                 edx, 1
            //   8955fc               | mov                 dword ptr [ebp - 4], edx
            //   ebce                 | jmp                 0xffffffd0
            //   b801000000           | mov                 eax, 1
            //   6bc809               | imul                ecx, eax, 9

        $sequence_6 = { 35ff000000 8b4d08 034dfc 8801 }
            // n = 4, score = 200
            //   35ff000000           | xor                 eax, 0xff
            //   8b4d08               | mov                 ecx, dword ptr [ebp + 8]
            //   034dfc               | add                 ecx, dword ptr [ebp - 4]
            //   8801                 | mov                 byte ptr [ecx], al

        $sequence_7 = { 0fb675fd 33ce 0fb61402 33d1 b801000000 d1e0 }
            // n = 6, score = 200
            //   0fb675fd             | movzx               esi, byte ptr [ebp - 3]
            //   33ce                 | xor                 ecx, esi
            //   0fb61402             | movzx               edx, byte ptr [edx + eax]
            //   33d1                 | xor                 edx, ecx
            //   b801000000           | mov                 eax, 1
            //   d1e0                 | shl                 eax, 1

        $sequence_8 = { 50 ff15???????? c645e800 33c9 894de9 894ded 894df1 }
            // n = 7, score = 200
            //   50                   | push                eax
            //   ff15????????         |                     
            //   c645e800             | mov                 byte ptr [ebp - 0x18], 0
            //   33c9                 | xor                 ecx, ecx
            //   894de9               | mov                 dword ptr [ebp - 0x17], ecx
            //   894ded               | mov                 dword ptr [ebp - 0x13], ecx
            //   894df1               | mov                 dword ptr [ebp - 0xf], ecx

        $sequence_9 = { c645d2e0 c645d34f c645d4d0 c645d520 c645d6ea c645d73a c645d869 }
            // n = 7, score = 200
            //   c645d2e0             | mov                 byte ptr [ebp - 0x2e], 0xe0
            //   c645d34f             | mov                 byte ptr [ebp - 0x2d], 0x4f
            //   c645d4d0             | mov                 byte ptr [ebp - 0x2c], 0xd0
            //   c645d520             | mov                 byte ptr [ebp - 0x2b], 0x20
            //   c645d6ea             | mov                 byte ptr [ebp - 0x2a], 0xea
            //   c645d73a             | mov                 byte ptr [ebp - 0x29], 0x3a
            //   c645d869             | mov                 byte ptr [ebp - 0x28], 0x69

    condition:
        7 of them and filesize < 940032
}