rule win_webc2_bolid_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-03-28"
        version = "1"
        description = "Detects win.webc2_bolid."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.webc2_bolid"
        malpedia_rule_date = "20230328"
        malpedia_hash = "9d2d75cef573c1c2d861f5197df8f563b05a305d"
        malpedia_version = "20230407"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 6a01 8d442470 83ec10 8bcc 89642438 50 }
            // n = 6, score = 100
            //   6a01                 | push                1
            //   8d442470             | lea                 eax, [esp + 0x70]
            //   83ec10               | sub                 esp, 0x10
            //   8bcc                 | mov                 ecx, esp
            //   89642438             | mov                 dword ptr [esp + 0x38], esp
            //   50                   | push                eax

        $sequence_1 = { 51 8bc8 e8???????? 8b4df4 5f 8bc3 5e }
            // n = 7, score = 100
            //   51                   | push                ecx
            //   8bc8                 | mov                 ecx, eax
            //   e8????????           |                     
            //   8b4df4               | mov                 ecx, dword ptr [ebp - 0xc]
            //   5f                   | pop                 edi
            //   8bc3                 | mov                 eax, ebx
            //   5e                   | pop                 esi

        $sequence_2 = { 6a00 c745ec00000000 c745e801000000 ffd7 }
            // n = 4, score = 100
            //   6a00                 | push                0
            //   c745ec00000000       | mov                 dword ptr [ebp - 0x14], 0
            //   c745e801000000       | mov                 dword ptr [ebp - 0x18], 1
            //   ffd7                 | call                edi

        $sequence_3 = { 88442428 83c9ff 33c0 83c414 f2ae f7d1 }
            // n = 6, score = 100
            //   88442428             | mov                 byte ptr [esp + 0x28], al
            //   83c9ff               | or                  ecx, 0xffffffff
            //   33c0                 | xor                 eax, eax
            //   83c414               | add                 esp, 0x14
            //   f2ae                 | repne scasb         al, byte ptr es:[edi]
            //   f7d1                 | not                 ecx

        $sequence_4 = { 3ad9 7510 8bce 8bfd 8bf0 33db }
            // n = 6, score = 100
            //   3ad9                 | cmp                 bl, cl
            //   7510                 | jne                 0x12
            //   8bce                 | mov                 ecx, esi
            //   8bfd                 | mov                 edi, ebp
            //   8bf0                 | mov                 esi, eax
            //   33db                 | xor                 ebx, ebx

        $sequence_5 = { e8???????? 6a01 8d8eec000000 c64424180a e8???????? }
            // n = 5, score = 100
            //   e8????????           |                     
            //   6a01                 | push                1
            //   8d8eec000000         | lea                 ecx, [esi + 0xec]
            //   c64424180a           | mov                 byte ptr [esp + 0x18], 0xa
            //   e8????????           |                     

        $sequence_6 = { 8808 8b44241c 3bc6 77ac }
            // n = 4, score = 100
            //   8808                 | mov                 byte ptr [eax], cl
            //   8b44241c             | mov                 eax, dword ptr [esp + 0x1c]
            //   3bc6                 | cmp                 eax, esi
            //   77ac                 | ja                  0xffffffae

        $sequence_7 = { 8d4c2420 e8???????? 83f8ff 7469 8a542414 83ec10 }
            // n = 6, score = 100
            //   8d4c2420             | lea                 ecx, [esp + 0x20]
            //   e8????????           |                     
            //   83f8ff               | cmp                 eax, -1
            //   7469                 | je                  0x6b
            //   8a542414             | mov                 dl, byte ptr [esp + 0x14]
            //   83ec10               | sub                 esp, 0x10

        $sequence_8 = { e8???????? 8a4c244c 83ec10 8bf4 }
            // n = 4, score = 100
            //   e8????????           |                     
            //   8a4c244c             | mov                 cl, byte ptr [esp + 0x4c]
            //   83ec10               | sub                 esp, 0x10
            //   8bf4                 | mov                 esi, esp

        $sequence_9 = { b90f000000 33c0 8d7c2410 c784246c06000000000000 }
            // n = 4, score = 100
            //   b90f000000           | mov                 ecx, 0xf
            //   33c0                 | xor                 eax, eax
            //   8d7c2410             | lea                 edi, [esp + 0x10]
            //   c784246c06000000000000     | mov    dword ptr [esp + 0x66c], 0

    condition:
        7 of them and filesize < 163840
}